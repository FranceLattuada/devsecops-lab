name: Security CICD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  security:
    runs-on: ubuntu-latest

    steps:

    # ------------------------------------------
    # Build - Checkout, Java & Maven
    # ------------------------------------------
    - name: Checkout WebGoat repository
      uses: actions/checkout@v4
      with:
        repository: WebGoat/WebGoat

    - name: Set up Java 23
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: 23
        architecture: x64

    - name: Build WebGoat with Maven
      run:  mvn -B package -DskipTests
          
    # ------------------------------------------
    # SAST - Opengre
    # ------------------------------------------
    - name: "Run AccuKnox SAST: Opengrep"
      uses: accuknox/sast-scan-opengrep-action@1.0.0
      with:
        input_soft_fail: true 
        upload_artifact: true 

    # ------------------------------------------
    # SCA - OWASP Dependency Check
    # ------------------------------------------
    - name: Run OWASP Dependency Check SCA Scan
      uses: dependency-check/Dependency-Check_Action@main
      id: DepCheck
      with:
        project: 'WebGoat'
        path: '.' # Escanea todo el workspace
        format: 'HTML' # Formatos: HTML, XML, JSON, CSV, JUNIT
        # failOnCVSS: '8' # Opcional: Falla el build si alguna CVE tiene un score CVSS >= 8
      env:
        # actions/setup-java@v1 changes JAVA_HOME so it needs to be reset to match the depcheck image
        JAVA_HOME: /opt/jdk
        
    - name: Upload OWASP Dependency Check Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-sca-report
        path: ${{github.workspace}}/reports

    # ------------------------------------------
    # Build - Docker
    # ------------------------------------------
    - name: Build WebGoat Docker Image (using official Dockerfile)
      id: build_docker_image
      run: |
        IMAGE_NAME="webgoat-local"
        IMAGE_TAG="${{ github.sha }}"
        echo "Building Docker image $IMAGE_NAME:$IMAGE_TAG using WebGoat's official Dockerfile..."
        docker build . -f Dockerfile -t "$IMAGE_NAME:$IMAGE_TAG"
        echo "IMAGE_FULL_NAME=$IMAGE_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Docker image built: $IMAGE_NAME:$IMAGE_TAG"

    # ------------------------------------------
    # CCA - Grype (Container Vulnerability Scan)
    # ------------------------------------------
    - name: Run Grype Container Vulnerability Scan
      uses: anchore/scan-action@v6.2.0
      id: grype_scan
      with:
        image: '${{ steps.build_docker_image.outputs.IMAGE_FULL_NAME }}'
        fail-build: true 
        output-format: 'sarif'
        output-file: 'grype-results.sarif'

    - name: Upload Grype scan report as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: grype-cca-report
        path: grype-results.sarif
        
    # ------------------------------------------
    # Docker - WebGoat Start
    # ------------------------------------------
    - name: Create WebGoat Docker Network
      id: create_webgoat_network
      if: always()
      run: docker network create zap-net

    - name: Start WebGoat Docker Container
      id: start_webgoat_docker
      if: always()
      run: docker run -d --network zap-net -p 127.0.0.1:8080:8080 -p 127.0.0.1:9090:9090 ${{ steps.build_docker_image.outputs.IMAGE_FULL_NAME }}
      
    - name: Wait for WebGoat server to be ready
      id: wait_webgoat_server
      if: always()
      run: |
        set -e
        TIMEOUT=120
        ELAPSED=0
        while ! curl -s http://localhost:8080/WebGoat > /dev/null; do
          echo "Waiting for server..."
          sleep 5
          ELAPSED=$((ELAPSED + 5))
          if [ "$ELAPSED" -ge "$TIMEOUT" ]; then
            echo "Server did not start within $TIMEOUT seconds."
            exit 1
          fi
        done
      shell: bash
      
    # ------------------------------------------
    # DAST - OWASP ZAP
    # ------------------------------------------
    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.14.0
      if: always()
      with:
        target: 'http://localhost:8080/WebGoat/'
        report_html: 'zap_baseline_report.html'
        report_md: 'zap_baseline_report.md'
        report_xml: 'zap_baseline_report.xml'

    - name: Upload ZAP Baseline Scan Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-baseline-dast-reports
        path: |
          zap_baseline_report.html
          zap_baseline_report.md
          zap_baseline_report.xml
          zap_rules.tsv
          
    # ------------------------------------------
    # Docker - WebGoat Stop
    # ------------------------------------------
    - name: Stop WebGoat (Attempt)
      if: always()
      run: |
        echo "Attempting to stop WebGoat..."
        pkill -f "webgoat-server" || pkill -f "webgoat.jar" || echo "WebGoat process not found or already stopped."
        sleep 5 # Dar tiempo para que el proceso termine
